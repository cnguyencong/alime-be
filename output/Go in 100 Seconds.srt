1
00:00:00,000 --> 00:00:06,120
Go, a statically typed compiled language, often described as C for the 21st century.

2
00:00:06,120 --> 00:00:10,640
It's a popular choice for high-performance, server-side applications, and is the language

3
00:00:10,640 --> 00:00:14,480
that built tools like Docker, CockroachDB, and DeGraph.

4
00:00:14,480 --> 00:00:19,720
It was created at Google in 2007 by legends who really know their stuff, like Ken Thompson,

5
00:00:19,720 --> 00:00:22,920
the inventor of the B and C programming languages.

6
00:00:22,920 --> 00:00:26,560
Version 1.0 was released as open-source software in 2012.

7
00:00:26,560 --> 00:00:31,720
It was designed for simplicity and efficiency, and that's why we call it Go, and not Go Lang.

8
00:00:31,720 --> 00:00:35,920
The source code is compiled down to machine code, which means it generally outperforms interpreted

9
00:00:35,920 --> 00:00:36,920
languages.

10
00:00:36,920 --> 00:00:41,640
But it's famous for its extremely fast compile times, made possible by innovations to dependency

11
00:00:41,640 --> 00:00:42,640
analysis.

12
00:00:42,640 --> 00:00:46,600
And even though it's a statically typed language, it performs type inference to deliver

13
00:00:46,600 --> 00:00:49,280
a syntax that is very concise and practical.

14
00:00:49,280 --> 00:00:54,480
It also has a package and module system, making it easy to import and export code between

15
00:00:54,480 --> 00:00:55,480
the projects.

16
00:00:55,480 --> 00:00:59,560
To get started, install Go, and then open an empty directory on your system, create a

17
00:00:59,560 --> 00:01:05,880
file ending in .go, then add package main at the top to create a standalone executable,

18
00:01:05,880 --> 00:01:09,880
then declare a main function, which is where your program will start executing.

19
00:01:09,880 --> 00:01:15,560
Go has a standard library of core packages to handle common requirements like math, networking,

20
00:01:15,560 --> 00:01:16,880
or formatted IO.

21
00:01:16,880 --> 00:01:21,720
By importing FMT, we can print a line to the standard output, then run the Go build

22
00:01:21,720 --> 00:01:26,640
command, and it quickly compiles the source code and dependencies into an executable binary.

23
00:01:26,640 --> 00:01:30,880
When it comes to dependencies, we can also link to remote packages on GitHub, run Go,

24
00:01:30,880 --> 00:01:35,160
mod, and knit from the command line, and that creates a Go module file that enables dependency

25
00:01:35,160 --> 00:01:36,160
tracking.

26
00:01:36,160 --> 00:01:39,960
Syntactically, Go is like a concise version of C or C++.

27
00:01:39,960 --> 00:01:44,400
Declare a variable with the var keyword, followed by its name and type, and initialize

28
00:01:44,400 --> 00:01:45,520
it with a value.

29
00:01:45,520 --> 00:01:50,120
Or you might use the short assignment syntax to replace var, and let Go automatically infer

30
00:01:50,120 --> 00:01:51,120
the type.

31
00:01:51,120 --> 00:01:53,640
You can define multiple variables from a single line.

32
00:01:53,640 --> 00:01:57,440
Go has all the other features you would expect in a programming language, like arrays, maps,

33
00:01:57,440 --> 00:02:01,880
loops, and control flow, but also allows you to store the memory address of a value using

34
00:02:01,880 --> 00:02:06,920
pointers, while disallowing pointer arithmetic, which often leads to dangerous and unpredictable

35
00:02:06,920 --> 00:02:07,920
behavior.

36
00:02:07,920 --> 00:02:11,840
In addition, it supports concurrency with Go routines, which are functions that can run

37
00:02:11,840 --> 00:02:16,640
at the same time as other functions by utilizing multiple threads on a CPU.

38
00:02:16,640 --> 00:02:18,720
This has been Go in 100 seconds.

39
00:02:18,720 --> 00:02:21,640
Hit the like button if you want to see more short videos like this, and check out the

40
00:02:21,640 --> 00:02:25,320
full article to write your first 100 lines of Go on Fireship I-O.

41
00:02:25,320 --> 00:02:27,840
Thanks for watching, and I will see you in the next one.
